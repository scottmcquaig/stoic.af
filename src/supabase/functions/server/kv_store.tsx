/* AUTOGENERATED FILE - DO NOT EDIT CONTENTS */

/* Table schema:
CREATE TABLE kv_store_6d6f37b2 (
  key TEXT NOT NULL PRIMARY KEY,
  value JSONB NOT NULL
);
*/

// View at https://supabase.com/dashboard/project/vuqwcuhudysudgjbeota/database/tables

// This file provides a simple key-value interface for storing Figma Make data. It should be adequate for most small-scale use cases.
import { createClient } from "jsr:@supabase/supabase-js@2.49.8";

const client = () => {
  const url = Deno.env.get("SUPABASE_URL");
  const key = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
  
  if (!url || !key) {
    console.error('‚ùå Missing Supabase environment variables:', {
      hasUrl: !!url,
      hasKey: !!key,
      urlPrefix: url?.substring(0, 20)
    });
    throw new Error('Missing required Supabase environment variables');
  }
  
  try {
    return createClient(url, key);
  } catch (error) {
    console.error('‚ùå Failed to create Supabase client:', error);
    throw error;
  }
};

// Set stores a key-value pair in the database.
export const set = async (key: string, value: any): Promise<void> => {
  try {
    console.log(`üîç KV set operation for key: ${key}`);
    const supabase = client();
    
    if (!supabase) {
      throw new Error('Supabase client initialization failed');
    }
    
    const { error } = await supabase.from("kv_store_6d6f37b2").upsert({
      key,
      value
    });
    
    if (error) {
      console.error(`‚ùå KV set error for key ${key}:`, {
        message: error.message,
        details: error.details,
        hint: error.hint,
        code: error.code
      });
      throw new Error(`KV store upsert failed: ${error.message}`);
    }
    
    console.log(`‚úÖ KV set successful for key ${key}`);
  } catch (error) {
    console.error(`‚ùå KV set exception for key ${key}:`, error);
    throw error;
  }
};

// Get retrieves a key-value pair from the database.
export const get = async (key: string): Promise<any> => {
  try {
    console.log(`üîç KV get operation for key: ${key}`);
    const supabase = client();
    
    if (!supabase) {
      throw new Error('Supabase client initialization failed');
    }
    
    const { data, error } = await supabase.from("kv_store_6d6f37b2").select("value").eq("key", key).maybeSingle();
    
    if (error) {
      console.error(`‚ùå KV get error for key ${key}:`, {
        message: error.message,
        details: error.details,
        hint: error.hint,
        code: error.code
      });
      throw new Error(`KV store query failed: ${error.message}`);
    }
    
    console.log(`‚úÖ KV get successful for key ${key}, has data: ${!!data}`);
    return data?.value;
  } catch (error) {
    console.error(`‚ùå KV get exception for key ${key}:`, error);
    throw error;
  }
};

// Delete deletes a key-value pair from the database.
export const del = async (key: string): Promise<void> => {
  const supabase = client()
  const { error } = await supabase.from("kv_store_6d6f37b2").delete().eq("key", key);
  if (error) {
    throw new Error(error.message);
  }
};

// Sets multiple key-value pairs in the database.
export const mset = async (keys: string[], values: any[]): Promise<void> => {
  const supabase = client()
  const { error } = await supabase.from("kv_store_6d6f37b2").upsert(keys.map((k, i) => ({ key: k, value: values[i] })));
  if (error) {
    throw new Error(error.message);
  }
};

// Gets multiple key-value pairs from the database.
export const mget = async (keys: string[]): Promise<any[]> => {
  const supabase = client()
  const { data, error } = await supabase.from("kv_store_6d6f37b2").select("value").in("key", keys);
  if (error) {
    throw new Error(error.message);
  }
  return data?.map((d) => d.value) ?? [];
};

// Deletes multiple key-value pairs from the database.
export const mdel = async (keys: string[]): Promise<void> => {
  const supabase = client()
  const { error } = await supabase.from("kv_store_6d6f37b2").delete().in("key", keys);
  if (error) {
    throw new Error(error.message);
  }
};

// Search for key-value pairs by prefix.
export const getByPrefix = async (prefix: string): Promise<any[]> => {
  const supabase = client()
  const { data, error } = await supabase.from("kv_store_6d6f37b2").select("key, value").like("key", prefix + "%");
  if (error) {
    throw new Error(error.message);
  }
  return data?.map((d) => d.value) ?? [];
};